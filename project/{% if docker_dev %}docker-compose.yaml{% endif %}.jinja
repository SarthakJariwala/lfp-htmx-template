services:
  web:
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: uv run python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    restart: unless-stopped
    {% if docker_dev and database == 'postgresql' %}
    depends_on:
      db:
        condition: service_healthy
    {% endif %}
    networks:
      - app-network
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
        - action: rebuild
          path: ./pyproject.toml
  {% if docker_dev and database == 'postgresql' %}
  db:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB={{ project_name }}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 2s
      retries: 10
{% endif %}

networks:
  app-network:
    driver: bridge
{% if docker_dev and database == 'postgresql' %}
volumes:
  postgres_data:
{% endif %}
